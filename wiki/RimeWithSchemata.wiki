#summary Rime 輸入方案創作指南
#labels Phase-Support

= Rime with Schemata =

Rime 輸入方案創作《指南書》

※ 佛振 <chen.sst@gmail.com> 修訂於 2012-03-09

= 準備開工 =

Rime 是跨平臺的輸入法軟件，Rime 輸入方案可通用於以下發行版：
  * 【中州韻】 ibus-rime → Linux
  * 【小狼毫】 Weasel → Windows
  * 【鼠鬚管】 Squirrel → Mac OS X

取得適合你系統的最新版 Rime 輸入法，印一份《指南書》，準備開工了！

== Rime with Text Files ==

文本爲王。
Rime 的配置文件、輸入方案定義及詞典文件，均爲特定格式的文本文檔。
因此，一款夠專業的 *文本編輯器* ，是設計 Rime 輸入方案的必備工具。

Rime 中所有文本文檔，均要求以 UTF-8 編碼，並建議使用 UNIX 換行符（LF）。

鑑於一些文本編輯器會爲 UTF-8 編碼的文件添加 BOM 標記，爲防止誤將該字符混入文中，
莫要從文件的第一行開始正文，而請在該行行首以 # 記號起一行註釋，如：
{{{
# Rime default settings
}}}
{{{
# Rime schema: My First Cool Schema
}}}
{{{
# Rime dictionary: Lingua Latina
}}}
也可繼續以註釋行寫下方案簡介、碼表來源、製作者、修訂記錄等信息，再切入正文。

== 必知必會 ==

Rime 輸入法中，多用擴展名爲「.yaml」的文本文檔，這是以一種可讀性高的數據描述語言—— YAML 寫成。

請訪問 [http://yaml.org/] 瞭解 YAML 文檔格式。
下文只對部分語法作簡要說明，而將重點放在對語義的解讀上面。

Rime 輸入方案亦會用到「正則表達式」實現一些高級功能。

輸入方案設計者需要掌握這份文檔所描述的 Perl 正則表達式語法：

[http://www.boost.org/doc/libs/1_49_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html]

== Rime 中的數據文件分佈及作用 ==

除程序文件以外，Rime 還包括多種數據文件。
這些數據文件存在於以下位置：

共享資料夾
  * 【中州韻】  `/usr/share/ibus-rime/`
  * 【小狼毫】  `"安裝目錄\data"`
  * 【鼠鬚管】  `"/Library/Input Methods/Squirrel.app/Contents/SharedSupport/"`

用戶資料夾 
  * 【中州韻】  `~/.ibus/rime/`
  * 【小狼毫】  `"%APPDATA%\Rime"`
  * 【鼠鬚管】  `~/Library/Rime/`

共享資料夾包含預設輸入方案的源文件。
這些文件屬於 Rime 所發行軟件的一部份，在訪問權限控制較嚴格的系統上對用戶是只讀的，因此謝絕軟件版本更新以外的任何修改——
一旦用戶修改這裏的文件，很可能影響後續的軟件升級或在升級時丟失數據。

在 Rime 做「部署」操作時，將用到這裏的輸入方案源文件、並結合用戶定製的內容來編譯預設輸入方案。

用戶資料夾則包含爲用戶定製的內容，如：
  * 〔全局設定〕 `default.yaml`
  * 〔發行版設定〕 `weasel.yaml`
  * 〔預設輸入方案副本〕 `<方案標識>.schema.yaml`

  * ※〔安裝信息〕 `installation.yaml`
  * ※〔用戶狀態信息〕 `user.yaml`
  * ※〔用戶對全局設定的定製信息〕 `default.custom.yaml`
  * ※〔用戶對輸入方案的定製信息〕 `<方案標識>.custom.yaml`

以及編譯輸入方案所產出的二進制文件：
  * 〔Rime 棱鏡〕 `<方案標識>.prism.bin`
  * 〔Rime 固態詞典〕 `<詞典名>.table.bin`
  * 〔Rime 反查詞典〕 `<詞典名>.reverse.bin`

含有用戶寫作習慣的文件：
  * ※〔用戶詞典〕 `<詞典名>.userdb.kct`
  * ※〔用戶詞典備份〕 `<詞典名>.userdb.kct.snapshot`

總之，輸入法完成輸入工作時所需的文件，都從用戶資料夾讀取；
用戶  *自定義輸入方案* 及配套的 *詞典源文件* ，也需要放在這裏方可完成部署。

註：以上標有 ※ 號的文件，包含用戶資料，在您清理文件時要小心！


= Rime 輸入方案 =

Rime 輸入法從設計之初就仔細考慮這個問題：
如何以一套通用的程序，支持多種不同類型的輸入法，使得對算法的增強，在這些不同的輸入法中體現出相同的效果。
最後，將輸入法的共同點提取出來，用代碼寫成了 Rime 的核心算法；而將每一款輸入法的個性，由可加載到 Rime 中的「輸入方案」來表現。

一套輸入方案，通常包含「方案定義」和「詞典」文件。


== 方案定義 ==

方案定義，命名爲 `<方案標識>.schema.yaml`，是一份包含輸入方案配置信息的 YAML 文檔。

文檔中需要有這樣一組方案描述：

{{{
# 以下代碼片段節選自 luna_pinyin.schema.yaml

schema:
  schema_id: luna_pinyin
  name: 朙月拼音
  version: "0.9"
  author:
    - 佛振 <chen.sst@gmail.com>
  description: |
    Rime 預設的拼音輸入方案。
}}}

首先來爲方案命名。`schema/name` 字段是顯示在〔方案選單〕中的名稱。

然後——重點是——要定一個在整個 Rime 輸入法中唯一的「方案標識」，即 `schema/schema_id` 字段。
方案標識由小寫字母、數字、下劃線構成。
僅於輸入法內部使用，且會構成方案定義文件名的一部分，因此不要用大寫字母、漢字、其他符號。
一例：這款名爲【朙月拼音】的輸入方案，方案標識爲「luna_pinyin」。

方案如做升級，通過版本號（`schema/version`）來區分相互兼容的新舊版本。

版本號——以「.」分隔的整數（或文字）構成的字符串。

如下都是版本號常見的形式：
{{{
"1"      # 最好加引號表明是字符串！
"1.0"    # 最好加引號表明是字符串！
"0.9.8"
"0.9.8.custom.86427531"  # 這種形式是經過用戶自定義的版本；自動生成
}}}

然而，若對方案的升級會導致原有的用戶輸入習慣無法在新的方案中繼續使用，則需要換個新的方案標識。

比如【倉頡五代】之於【倉頡三代】、【五筆98】之於【五筆86】，其實已是互不兼容的輸入法。

`schema/author` ——列出作者和主要貢獻者，格式爲文字列表：

{{{
schema:
  author:
    - 作者甲 <alpha@rime.org>
    - 作者乙 <beta@rime.org>
    - 作者丙
}}}

`schema/description` ——對方案作簡要介紹的多行文字。

以上 `schema/schema_id`、`schema/version` 字段用於在程序中識別輸入方案，
而 `schema/name`、`schema/author`、`schema/description` 則主要是展示給用戶的信息。


除方案描述外，方案定義文件中還包含各種功能設定，控制着輸入法引擎的工作方式。
下文要找機會逐一介紹給大家。


== 碼表與詞典 ==

Rime 的詞典文件，命名爲 `<詞典名>.dict.yaml`，包含一份碼表及對應的規則說明。
詞典文件的前半部份爲一份 YAML 文檔：

{{{
# 注意這裏以 --- ... 分別標記出 YAML 文檔的起始與結束位置
# 在 ... 標記之後的部份就不會作 YAML 文檔來解讀

---
name: luna_pinyin
version: "0.9"
sort: by_weight
use_preset_vocabulary: true
...
}}}

解釋：

  * `name`: 詞典名，內部使用，命名原則同「方案標識」；可以與配套的輸入方案標識一致，也可不同；
  * `version`: 管理詞典的版本，規則同輸入方案定義文件的版本號；
  * `sort`: 詞條排序方式，可選填 `by_weight`（按詞頻高低排序）或 `original`（保持原碼表中的順序）；
  * `use_preset_vocabulary`: 填 `true` 或 `false`，選擇是否導入預設詞庫【八股文】。


碼表，定義了輸入法中編碼與文字的對應關係。

碼表位於詞典文件中 YAML 結束標記之後的部份。
其格式爲以製表符分隔的字段（TSV），每行定義一條「文字－編碼」的對應關係：
{{{
# 單字
你	ni
我	wo
的	de	99%
的	di	1%
地	de	10%
地	di	90%
目	mu
好	hao

# 詞組
你我
你的
我的
我的天
天地	tian di
好天
好好地
目的	mu di
目的地	mu di di
}}}
碼表部份，除了以上格式的編碼行，還可以包含空行（不含任何字符）及註釋行（行首爲 # 符號）。

以制表符（Tab）分隔的第一個字段是所定義的文字，可以是單字或詞組；

第二個字段是與文字對應的編碼；若該編碼由多個「音節」組成，音節之間以空個分開；

可選地、第三個字段是設定該字詞權重的頻度值（非負整數），或相對於預設權值的百分比（浮點數%）。
在拼音輸入法中，往往多音字的若干種讀音使用的場合不同，於是指定不同百分比來修正每個讀音的使用頻度。

詞組如果滿足以下條件，則可以省去編碼字段：

  * 詞組中每個單字均有編碼定義
  * 詞組中不包含多音字（例：你我），或多音字在該詞組中讀音的權值超過該多音字全部讀音權值的5%（例：我的）

這種條件下，詞組的編碼可由單字編碼的組合推導出來。

反之，則有必要給出詞組的編碼以消除自動註音的不確定性（例：天地）。

當含有多音字的詞組缺少編碼字段時，自動註音程序會利用權重百分比高於5%的讀音進行組合、生成全部可能的註音，如：

  「好好地」在編譯時自動註音爲「`hao hao de`」、「`hao hao di`」


== 編譯輸入方案 ==

將寫好的輸入方案佈署到 Rime 輸入法的過程，稱爲「編譯」：

爲查詢效率故，輸入法工作時不直接加載文本格式的詞典源文件，而要在佈署過程中，爲輸入方案生成專爲高速查詢設計的「.bin」文件。

編譯時程序做以下幾件事：

  * 將用戶的定製內容合併到輸入方案定義中，在用戶資料夾生成 .schema.yaml 文檔副本；
  * 依照輸入方案中指定的詞典：求得音節表（不同種編碼的集合）、單字表；
  * 對詞典中未提供編碼的詞組自動註音，也包括從【八股文】導入的詞組；
  * 建立按音節編碼檢索詞條的索引，製作 Rime 固態詞典；
  * 建立按詞條檢索編碼的索引，製作 Rime 反查詞典；
  * 依照音節表和方案定義中指定的拼寫運算規則，製作 Rime 棱鏡。


= 定製指南 =

當用戶需要對 Rime 中的各種設定做小的調節，最直接、但不完全正確的做法是：編輯用戶資料夾中那些 .yaml 文檔。

這一方法有弊端：

  * 當 Rime 軟件升級時，也會升級各種設定檔、預設輸入方案。用戶編輯過的文檔會被覆寫爲更高版本，所做調整也便丟失了。
  * 即使在軟件升級後再手動恢復經過編輯的文件，也會因設定檔的其他部分未得到更新而失去本次升級新增和修復的功能。


因此，對於隨 Rime 發行的設定檔及預設輸入方案，推薦的做法則是：

創建一個文件名的主體部份（「.」之前）與要定製的文件相同、次級擴展名（「.yaml」之前）爲 `.custom` 的定製文檔：

{{{
patch:
  "一級設定項/二級設定項/三級設定項": 新的設定值
  "另一個設定項": 新的設定值
  "再一個設定項": 新的設定值
}}}

就是這樣：`patch` 定義了一組「補靪」，以源文件中的設定爲基礎，寫入新的設定項、或以新的設定值取代現有設定項的值。

不懂？那看我來示範。


== 一例、定製每頁候選數 ==

Rime 中，默認每頁顯示至多5個候選項，而允許的範圍是 1〜9（個別 Rime 發行版可支持10個候選）。

若要將每頁候選數設爲9，以【朙月拼音】爲例，建立文檔 `luna_pinyin.custom.yaml` ：
{{{
patch:
  "menu/page_size": 9
}}}

*重新佈署* 即可生效。

註一：重新佈署的方法：

  * 【小狼毫】在托盤圖標上右鍵選擇「重新佈署」；
  * 其他發行版，刪除用戶資料夾的 `default.yaml`、重新啓動 Rime 服務進程。

註二：以上設定，只對該款輸入方案有效，其他輸入方案仍默認每頁5候選。

註三：「方案選單」的頁候選數，則要在 `default.custom.yaml` 裏定製。


== 一例、定製標點符號 ==

有的用家習慣以 `/` 鍵輸入標點「、」。

仍以【朙月拼音】爲例，輸入方案中有以下設定：
{{{
# luna_pinyin.schema.yaml
# ...

punctuator:
  import_preset: default
}}}

解釋：

`punctuator` 是 Rime 中負責轉換標點符號的組件。該組件會從設定中讀取符號映射表，而知道該做哪些轉換。

`punctuator/import_preset` 是說，本方案要導入一組預設的符號映射表、那張表寫在另一個設定檔 `<本設定項的值>.yaml` 裏；本例是要從 `default.yaml` 導入。

查看 `default.yaml` ，確有如下符號表：
{{{
punctuator:
  full_shape:
    # ……其他……
    "/" : [ ／, "/", ÷ ]
    # ……其他……
  half_shape:
    # ……其他……
    "/" : [ "/", ／, ÷ ]
    # ……其他……
}}}
可見按鍵 `/` 是被指定到 `"/", ／, ÷` 等一組符號了。
並且全角和半角狀態下，符號有不同的定義。

欲令 `/` 鍵直接輸出「、」，可如此定製 `luna_pinyin.custom.yaml`:
{{{
patch:
  "punctuator/full_shape":
    "/" : "、"
  "punctuator/half_shape":
    "/" : "、"
}}}

以上在輸入方案設定中寫入兩組新值，合併後的輸入方案成爲：
{{{
# luna_pinyin.schema.yaml:
# ...

punctuator:
  import_preset: default
  full_shape:
    "/" : "、"
  half_shape:
    "/" : "、"
}}}
含義是、在由 `default` 導入的符號表之上，覆寫對按鍵 `/` 的定義。

通過這種方法，既直接繼承了大多數符號的默認定義，又做到了局部的個性化。


== 一例、定製簡化字輸出 ==

TODO:


== 一例、定製方案選單 ==

TODO:


== 一例、定製【小狼毫】字體字號 ==

TODO:


== 一例、定製【小狼毫】配色方案 ==

TODO:


= 拼寫運算 =

TODO:


= 八股文 =

TODO:


= 東風破 =

TODO: